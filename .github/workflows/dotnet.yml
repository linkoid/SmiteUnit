# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main", "workflow-tests" ]
  pull_request:
    branches: [ "main" ]

jobs:
  #build:
  #  runs-on: ubuntu-latest
  #  container: mcr.microsoft.com/dotnet/sdk:8.0
  #  steps:
  #  - uses: actions/checkout@v4
  #  - name: Build
  #    run: dotnet build -c Release
  #  - name: Upload Build
  #    uses: actions/upload-artifact@v4
  #    with:
  #      name: build
  #      path: |
  #        **/obj/**
  #        **/bin/**

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
            8.0.x
            6.0.x
            3.1.x
    - name: Build
      run: dotnet build -c Release --nologo
    - name: Test .NET 6.0
      run: dotnet test -c Release -f net6.0 --no-build --verbosity normal
    - name: Test .NETCoreApp 3.1
      run: dotnet test -c Release -f netcoreapp3.1 --no-build --verbosity normal
    - name: Setup Mono
      run: |
        sudo apt install ca-certificates gnupg -y
        sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
        sudo apt update -y
        sudo apt install mono-devel -y
    - name: Create Alias for Test Program
      run: alias SmiteUnit.Tests.TestProgram.exe="mono SmiteUnit.Tests.TestProgram.exe"
    - name: Test .NET Framework 4.7.2 with Mono 5.4
      run: dotnet test -c Release -f net472 --no-build --verbosity normal

  publish:
    name: Publish
    #if: ${{github.ref_type}} == 'tag' && startsWith(${{github.ref_name}}, 'v')
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    environment: NuGet
    steps:
      - uses: actions/checkout@v4
      #- name: Setup .NET
      #  uses: actions/setup-dotnet@v4
      #  with:
      #    dotnet-version: 8.0.x
      - name: Build
        run: dotnet build -c Release --nologo
      - name: Get SmiteUnit.Framework Package
        id: smiteunit-framework-package
        run: |
          json=`dotnet build SmiteUnit.Framework/SmiteUnit.Framework.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Get SmiteUnit.Injection Package
        id: smiteunit-injection-package
        run: |
          json=`dotnet build SmiteUnit.Injection/SmiteUnit.Injection.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Get SmiteUnit Package
        id: smiteunit-package
        run: |
          json=`dotnet build SmiteUnit-Package/SmiteUnit-Package.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Get SmiteUnit.TestAdapter Package
        id: smiteunit-visualstudio-testadapter-package
        run: |
          json=`dotnet build SmiteUnit.TestAdapter/SmiteUnit.TestAdapter.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Push All Packages
        env:
          nupkgs:
            ${{ fromJson(steps.smiteunit-framework-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
            ${{ fromJson(steps.smiteunit-injection-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
            ${{ fromJson(steps.smiteunit-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
            ${{ fromJson(steps.smiteunit-visualstudio-testadapter-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
        run: dotnet nuget push $nupkgs -s nuget.org -k ${{secrets.NUGET_APIKEY}} --skip-duplicate
    outputs:
      version: ${{ fromJson(steps.smiteunit-package.outputs.json).Properties.Version }}

  tag:
    name: Tag
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
    - name: Get Version
      id: get-version
      run: |
        VERSION=`dotnet build SmiteUnit-Package/SmiteUnit-Package.csproj -getProperty:Version -c Release`
        echo version=$VERSION >> $GITHUB_OUTPUT
    - name: Push Git Tag
      env:
        TAG: v${{needs.publish.outputs.version}}
        GIT_TERMINAL_PROMPT: 0
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag $TAG
        git push origin $TAG

      
