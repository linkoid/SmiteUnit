<Project>
  <ItemGroup>
    <None Include="@(Build)" Pack="false" />
  </ItemGroup>

  <Target Name="_GetPackageBuildFiles" AfterTargets="_GetPackageFiles">
    <ItemGroup>
      <_PackageFiles Include="@(Build)" Condition="'%(Build.Pack)' == 'true'">
        <BuildAction Condition="'%(Build.BuildAction)' == ''">Build</BuildAction>
      </_PackageFiles>
    </ItemGroup>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Debug.targets"/>
  
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="BuildOnlySettings;ResolveReferences;_GetProjectReferenceVersions" >
    <ItemGroup>
      <_ProjectReferenceCopyLocalPaths Include="@(Reference->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')->WithMetadataValue('PrivateAssets', 'All'))" />
    </ItemGroup>
    
    <!-- Mark Included Assets -->
    <ItemGroup> 
      <_ProjectReferenceCopyLocalPaths Update="@(_ProjectReferenceCopyLocalPaths)">
        <_IncludeRuntimeAssets>false</_IncludeRuntimeAssets>
        <_IncludeRuntimeAssets
          Condition="'%(_ProjectReferenceCopyLocalPaths.IncludeAssets)' == ''
                     or '%(_ProjectReferenceCopyLocalPaths.IncludeAssets)' == 'All'
                     or $([System.String]::Copy('%(_ProjectReferenceCopyLocalPaths.IncludeAssets)').ToLower().Contains('runtime')) == 'true'"
          >true</_IncludeRuntimeAssets>
        <_IncludeRuntimeAssets
          Condition="'%(_ProjectReferenceCopyLocalPaths.ExcludeAssets)' == 'All'
                     or $([System.String]::Copy('%(_ProjectReferenceCopyLocalPaths.ExcludeAssets)').ToLower().Contains('runtime')) == 'true'"
          >false</_IncludeRuntimeAssets>

        <_IncludeCompileAssets>false</_IncludeCompileAssets>
        <_IncludeCompileAssets
          Condition="'%(_ProjectReferenceCopyLocalPaths.IncludeAssets)' == ''
                     or '%(_ProjectReferenceCopyLocalPaths.IncludeAssets)' == 'All'
                     or $([System.String]::Copy('%(_ProjectReferenceCopyLocalPaths.IncludeAssets)').ToLower().Contains('compile')) == 'true'"
          >true</_IncludeCompileAssets>
        <_IncludeCompileAssets
          Condition="'%(_ProjectReferenceCopyLocalPaths.ExcludeAssets)' == 'All'
                     or $([System.String]::Copy('%(_ProjectReferenceCopyLocalPaths.ExcludeAssets)').ToLower().Contains('compile')) == 'true'"
          >false</_IncludeCompileAssets>
      </_ProjectReferenceCopyLocalPaths>
    </ItemGroup>
    
    <!--<GetAllMetadata Items="@(_ProjectReferenceCopyLocalPaths->WithMetadataValue('Filename', 'SmiteUnit.TestAdapter')->WithMetadataValue('Extension', '.dll'))">
      <Output TaskParameter="MetadataString" PropertyName="_MetadataString" />
    </GetAllMetadata>
    <Message Text="$(_MetadataString)" Importance="High" />-->

    <Message Text="@(_ProjectReferenceCopyLocalPaths->'%(Filename) _IncludeRuntimeAssets: %(_IncludeRuntimeAssets) _IncludeCompileAssets: %(_IncludeCompileAssets)', '&#xA;')"
             Importance="High" />
    
    <ItemGroup>
      <BuildOutputInPackage Include="@(_ProjectReferenceCopyLocalPaths)">
        <FinalOutputPath>$([MSBuild]::NormalizePath(
          $(OutputPath),
          %(_ProjectReferenceCopyLocalPaths.DestinationSubDirectory),
          %(Filename)%(Extension)
        ))</FinalOutputPath>
        <TargetPath>%(_ProjectReferenceCopyLocalPaths.DestinationSubDirectory)</TargetPath>
        <!--<TargetPath Condition="'%(_IncludeRuntimeAssets)' == 'true'
                               and '%(_IncludeCompileAssets)' == 'false'
                              ">../../runtimes/%(BuildOutputInPackage.TargetPath)</TargetPath>-->
      </BuildOutputInPackage>
                            
    </ItemGroup>
  </Target>

  <Target Name="GetPackage" 
          DependsOnTargets="$(PackDependsOn)"
          Returns="@(_GetPackageOutput)">
    <ItemGroup>
      <_GetPackageOutput Include="@(NuGetPackOutput->WithMetadataValue('Extension', '.nupkg'))">
        <PackageId>$(PackageId)</PackageId>
        <PackageVersion>$(PackageVersion)</PackageVersion>
      </_GetPackageOutput>
    </ItemGroup>
  </Target>

  <Target Name="PublishToTestSource" DependsOnTargets="Pack" AfterTargets="Pack"
          Inputs="@(NuGetPackOutput)"
          Outputs="$(MSBuildProjectDirectory)/../packages/$(PackageId)/**/*"
          Returns="@(_TargetPackage)">
    <PropertyGroup>
      <_PackagePath>@(NuGetPackOutput->WithMetadataValue('Extension', '.nupkg'))</_PackagePath>
      <_PackageSource>$([System.IO.Path]::GetFullPath($(MSBuildProjectDirectory)/../packages))</_PackageSource>
      <_PackageDestinationFolder>$(_PackageSource)/$(PackageId)/$(PackageVersion)/</_PackageDestinationFolder>
    </PropertyGroup>
    <MakeDir Directories="$(PackageSource)" Condition="!Exists($(PackageSource))" />
    <!--<Exec Command="nuget delete $(PackageId) $(PackageVersion) -Source $(_PackageSource) -NonInteractive" ContinueOnError="true" />-->
    <!--<Exec Command="nuget add $(_PackagePath) -Source $(_PackageSource) -Expand -NonInteractive" />-->
    <RemoveDir Directories="$(_PackageDestinationFolder)" ContinueOnError="true" />
    <Unzip SourceFiles="$(_PackagePath)" DestinationFolder="$(_PackageDestinationFolder)" />
    <ItemGroup>
      <_TargetPackage Include="$(PackageId)" Version="$(PackageVersion)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishLocal" DependsOnTargets="Pack"
          Inputs="@(NuGetPackOutput)"
          Outputs="%USERPROFILE%/.nuget/packages/$(PackageId)/**/*"
          Returns="@(_TargetPackage)">
    <PropertyGroup>
      <PackagePath>@(NuGetPackOutput->WithMetadataValue('Extension', '.nupkg'))</PackagePath>
      <PackageSource>%USERPROFILE%/.nuget/packages</PackageSource>
    </PropertyGroup>
    <Exec Command="NuGet delete $(PackageId) $(PackageVersion) -Source $(PackageSource) -NonInteractive" ContinueOnError="true" />
    <Exec Command="NuGet add $(PackagePath) -Source $(PackageSource) -Expand -NonInteractive" />
    <ItemGroup>
      <_TargetPackage Include="$(PackageId)" Version="$(PackageVersion)" />
    </ItemGroup>
  </Target>

  <Target Name="UnpublishLocal">
    <PropertyGroup>
      <PackageSource>%USERPROFILE%/.nuget/packages</PackageSource>
    </PropertyGroup>
    <Exec Command="NuGet delete $(PackageId) $(PackageVersion) -Source $(PackageSource) -NonInteractive" ContinueOnError="true" />
  </Target>
</Project>
